<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.


/**
 * Generator base class
 *
 * All plugin generators should extend this class, so as to be recognized as valid
 * generator. This defines basic functionality which a plugin generator should have.
 *
 * @package    moodlecore
 * @subpackage generator
 * @copyright  2011 Rajesh Taneja
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class generator_base {
    //Define state of generator.
    const START_PROCESS = 1;
    const PROCESSING = 2;
    const END_PROCESS = 3;

    /**
     * Short name of plugin, used for fieldset naming. This should be name of the
     * plugin. If it's a sub plugin then it should be {Plugintype}_{pluginname}.
     * For core subsystem, plugin name is the shortname.
     * eg. For course shortname will be course
     *     For mod/assignment shortname will be mod_assignment
     *     For mod/assignment/online it will be assignment_online
     * @var string
     */
    public $shortname;

    /**
     * Long name of plugin, explaining the plugin. It will be displayed to user
     * while showing configuration and selecting plugings.
     * @var string
     */
    public $longname;

    /**
     * This defines the prerequisites which this generator should be called before
     * this plugin generators. This has to be shortname of plugin
     * @var array
     */
    public $generatorprerequisite;

    /**
     * List of tables in which plugin generator will insert/update data.
     * @var array
     */
    public $modifiedtables;

    /**
     * Return details of plugin generator.
     *
     * It should atleast return short name, long name, generator priority (order
     * in which this plugin should generate data) and modified table list.
     *
     * @return array associative array with shortname, longname, priority
     *         and modifiedtables
     */
    public function generator_details() {
        //Override this if you want more information to be shared for plugin generator
        return array(
            'shortname'     => $this->shortname,
            'longname'      => $this->longname,
            'prerequisite'  => $this->generatorprerequisite,
            'tables'        => $this->modifiedtables);
    }

    /**
     * Configuration for plugin generator
     *
     * This should insert form elements in passed MoodleQuickForm object for plugin
     * configuration required by user, like how many users, courses etc.
     *
     * @param MoodleQuickForm $mform moodleform object which should be appended
     *        with plugin generator configuration.
     * @param bool $detailed if true should show all configuration else should show
     *        minimum configuration
     * @param bool $randomize if true then randomize data
     */
    public function generator_configuration(MoodleQuickForm $mform, $detailed, $randomize) {
        //override this if you want to get any configuration values for generator.
    }

    /**
     * Validate configuration for plugin generator
     * Any validation check for generator configutaion should be done here.
     *
     * @param array data posted form data
     * @param array file information about uploadeded file
     *
     * @return array error message
     */
    public function validate_configuration($data, $file) {
        //override this if you want to validate any configuration values for generator.
        return null;
    }

    /**
     * Generate data for plugin depending on configuration
     *
     * It should retrive configuration options which were inserted by
     * generator_configuration and generate data depending on configuration options
     * selected by user.
     *
     * @param bool $verbose if true should echo details of where and what data
     *        is inserted/updated.
     */
    abstract public function generate_data($verbose);

    /**
     * This should return data which was generated by generate_data, to be shared
     * by other generator's so that database hits can be reduced.
     * if this plugin data is used by other plugins then they should be retrived
     * by this function.
     * Try keep it minimum to avoid memory issues, like for users just the id is
     * used often so no need to keep rest of the data.
     *
     * @param mixed $filter should pass value if particular data set is required.
     * @return mixed data set which was generated by plugin
     */
    public function data($filter = null) {
        //override this if you want to share any data which is generated.
    }

    /**
     * This function should be implemented by every plugin generator. It should
     * delete all data generated by plugin generator.
     * It will be executed in case some data plugin generator thow exception.
     * We don't want half way data to be generated :)
     */
    abstract public function clean_data();

    /**
     * Show progress bar to make user comfortable of something is happenig
     * @param string $msg message to be displayed next to progessbar.
     * @param int $status status constants , default is no-status
     * @param int $fontweight header font can vary from 1 to 6
     * @param bool $progressbar true if progessbar should be visible
     */
    public function show_progress($msg, $status = 0, $fontweight = 5, $progressbar = false) {
        //override to display your own progressbar....
        global $OUTPUT;
        ob_start();
        echo $OUTPUT->heading($msg, $fontweight);
        ob_end_flush();

    }
}