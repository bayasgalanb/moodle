<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.


/**
 * random data generator for user subsystem
 *
 * @package    moodlecore
 * @subpackage generator
 * @copyright  2011 Rajesh Taneja
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
require_once($CFG->dirroot .'/admin/generator/baseclass.php');
require_once($CFG->dirroot .'/admin/generator/lib.php');
require_once($CFG->dirroot .'/user/externallib.php');

class generator_user extends generator_base {
    /**
     * List of last names which will be used randomly as firstnames of users
     * @var array
     */
    protected $lastnames;

    /**
     * List of first names which will be used randomly as lastnames of users
     * @var array
     */
    protected $firstnames;

    /**
     * List of domains which will be used randomly as emails of users
     * @var array
     */
    protected $domains;

    /**
     * List of cities which will be used randomly as cities of users
     * @var array
     */
    protected $cities;

    /**
     * Associative array of id => username which has will be generated by this generator.
     * @var array
     */
    protected $userids = array();

    /**
     * Constructor initalizing generator information
     */
    public function __construct() {
        //short name of user plugin
        $this->shortname = 'user';

        //long name of user plugin
        $this->longname = 'User generator';

        //There is no prerequisite for this plugin
        $this->generatorprerequisite = null;

        //List of tables in which data will be inserted.
        $this->modifiedtables = array('user', 'user_info_field', 'user_info_data');

        //Fill lastnames, firstnames, domains and cities with pre-defined list
        $this->initalize_data();
    }

    /**
     * Initalize data array of lastnames, firstnames, domains and cities as this
     * information can't be extracted from system.
     */
    protected function initalize_data() {
        //Random list of lastnames
        $this->lastnames = array('SMITH', 'JOHNSON', 'WILLIAMS', 'JONES', 'BROWN', 'DAVIS',
            'MILLER', 'WILSON', 'MOORE', 'TAYLOR', 'ANDERSON', 'THOMAS', 'JACKSON', 'WHITE',
            'HARRIS', 'MARTIN', 'THOMPSON', 'GARCIA', 'MARTINEZ', 'ROBINSON', 'CLARK',
            'RODRIGUEZ', 'LEWIS', 'LEE', 'WALKER', 'HALL', 'ALLEN', 'YOUNG', 'HERNANDEZ',
            'KING', 'WRIGHT', 'LOPEZ', 'HILL', 'SCOTT', 'GREEN', 'ADAMS', 'BAKER', 'GONZALEZ',
            'NELSON', 'CARTER', 'MITCHELL', 'PEREZ', 'ROBERTS', 'TURNER', 'PHILLIPS', 'CAMPBELL',
            'PARKER', 'EVANS', 'EDWARDS', 'COLLINS', 'STEWART', 'SANCHEZ', 'MORRIS', 'ROGERS',
            'REED', 'COOK', 'MORGAN', 'BELL', 'MURPHY', 'BAILEY', 'RIVERA', 'COOPER',
            'RICHARDSON', 'COX', 'HOWARD', 'WARD', 'TORRES', 'PETERSON', 'GRAY', 'RAMIREZ',
            'JAMES', 'WATSON', 'BROOKS', 'KELLY', 'SANDERS', 'PRICE', 'BENNETT', 'WOOD',
            'BARNES', 'ROSS', 'HENDERSON', 'COLEMAN', 'JENKINS', 'PERRY', 'POWELL', 'LONG',
            'PATTERSON', 'HUGHES', 'FLORES', 'WASHINGTON', 'BUTLER', 'SIMMONS', 'FOSTER',
            'GONZALES', 'BRYANT', 'ALEXANDER', 'RUSSELL', 'GRIFFIN', 'DIAZ', 'HAYES', 'MYERS',
            'FORD', 'HAMILTON', 'GRAHAM', 'SULLIVAN', 'WALLACE', 'WOODS', 'COLE', 'WEST',
            'JORDAN', 'OWENS', 'REYNOLDS', 'FISHER', 'ELLIS', 'HARRISON', 'GIBSON', 'MCDONALD',
            'CRUZ', 'MARSHALL', 'ORTIZ', 'GOMEZ', 'MURRAY', 'FREEMAN', 'WELLS', 'WEBB', 'SIMPSON',
            'STEVENS', 'TUCKER', 'PORTER', 'HUNTER', 'HICKS', 'CRAWFORD', 'HENRY', 'BOYD',
            'MASON', 'MORALES', 'KENNEDY', 'WARREN', 'DIXON', 'RAMOS', 'REYES', 'BURNS', 'GORDON',
            'SHAW', 'HOLMES', 'RICE', 'ROBERTSON', 'HUNT', 'BLACK', 'DANIELS', 'PALMER', 'MILLS',
            'NICHOLS', 'GRANT', 'KNIGHT', 'FERGUSON', 'ROSE', 'STONE', 'HAWKINS', 'DUNN', 'PERKINS',
            'HUDSON', 'SPENCER', 'GARDNER', 'STEPHENS', 'PAYNE', 'PIERCE', 'BERRY', 'MATTHEWS',
            'ARNOLD', 'WAGNER', 'WILLIS', 'RAY', 'WATKINS', 'OLSON', 'CARROLL', 'DUNCAN',
            'SNYDER', 'HART', 'CUNNINGHAM', 'BRADLEY', 'LANE', 'ANDREWS', 'RUIZ', 'HARPER', 'FOX',
            'RILEY', 'ARMSTRONG', 'CARPENTER', 'WEAVER', 'GREENE', 'LAWRENCE', 'ELLIOTT', 'CHAVEZ',
            'SIMS', 'AUSTIN', 'PETERS', 'KELLEY', 'FRANKLIN', 'LAWSON', 'FIELDS', 'GUTIERREZ',
            'RYAN', 'SCHMIDT', 'CARR', 'VASQUEZ', 'CASTILLO', 'WHEELER', 'CHAPMAN', 'OLIVER',
            'MONTGOMERY', 'RICHARDS', 'WILLIAMSON', 'JOHNSTON', 'BANKS', 'MEYER', 'BISHOP', 'MCCOY',
            'HOWELL', 'ALVAREZ', 'MORRISON', 'HANSEN', 'FERNANDEZ', 'GARZA', 'HARVEY', 'LITTLE',
            'BURTON', 'STANLEY', 'NGUYEN', 'GEORGE', 'JACOBS', 'REID', 'KIM', 'FULLER', 'LYNCH',
            'DEAN', 'GILBERT', 'GARRETT', 'ROMERO', 'WELCH', 'LARSON', 'FRAZIER', 'BURKE',
            'HANSON', 'DAY', 'MENDOZA', 'MORENO', 'BOWMAN', 'MEDINA', 'FOWLER',  'TANEJA');

        //Random list of first names
        $this->firstnames = array( 'JAMES', 'JOHN', 'ROBERT', 'MARY', 'MICHAEL', 'WILLIAM',
            'DAVID', 'RICHARD', 'CHARLES', 'JOSEPH', 'THOMAS', 'PATRICIA', 'LINDA', 'CHRISTOPHER',
            'BARBARA', 'DANIEL', 'PAUL', 'MARK', 'ELIZABETH', 'JENNIFER', 'DONALD', 'GEORGE',
            'MARIA', 'KENNETH', 'SUSAN', 'STEVEN', 'EDWARD', 'MARGARET', 'BRIAN', 'DOROTHY',
            'RONALD', 'ANTHONY', 'LISA', 'KEVIN', 'NANCY', 'KAREN', 'BETTY', 'HELEN', 'JASON',
            'MATTHEW', 'GARY', 'TIMOTHY', 'SANDRA', 'JOSE', 'LARRY', 'JEFFREY', 'DONNA', 'FRANK',
            'CAROL', 'RUTH', 'SCOTT', 'ERIC', 'STEPHEN', 'ANDREW', 'SHARON', 'MICHELLE', 'LAURA',
            'SARAH', 'KIMBERLY', 'DEBORAH', 'JESSICA', 'RAYMOND', 'SHIRLEY', 'CYNTHIA', 'ANGELA',
            'MELISSA', 'BRENDA', 'AMY', 'GREGORY', 'ANNA', 'JOSHUA', 'JERRY', 'REBECCA', 'VIRGINIA',
            'KATHLEEN', 'PAMELA', 'DENNIS', 'MARTHA', 'DEBRA', 'AMANDA', 'STEPHANIE', 'WALTER',
            'PATRICK', 'CAROLYN', 'CHRISTINE', 'PETER', 'MARIE', 'JANET', 'CATHERINE', 'HAROLD',
            'FRANCES', 'DOUGLAS', 'HENRY', 'ANN', 'JOYCE', 'DIANE', 'ALICE', 'JULIE', 'CARL',
            'HEATHER',  'RAJESH');

        //Random list of domains
        $this->domains = array('gmail', 'yahoo', 'rediffmail', 'moodle', 'abc', 'xzy');

        //Random list of cities.
        $this->cities = array('Perth', 'Albany', 'Armadale', 'Bayswater', 'Belmont', 'Bunbury',
            'Canning', 'Cockburn', 'Fremantle', 'Geraldton-Greenough', 'Gosnells', 'Joondalup',
            'Sydney', 'Albury', 'Armidale', 'Bathurst', 'Blue Mountains', 'Broken Hill',
            'Campbelltown', 'Cessnock', 'Dubbo', 'Goulburn', 'Grafton', 'Lithgow',
            'Liverpool', 'Newcastle', 'Orange', 'Parramatta', 'Penrith');
    }

    /**
     * Configuration for plugin generator
     *
     * This will insert form elements in MoodleQuickForm object for user plugin
     * configuration. Configuration options required are:
     * - Number of user records to create
     * - username prefix which will be prefixed in username sequence.
     * - default password for all users.
     * - one or random theme, language and translation to be used.
     * - one or random timezone to be used.
     *
     * @param MoodleQuickForm $mform moodleform object which should be appended
     *        with plugin generator configuration.
     * @param bool $detailed if true should show all configuration else should show
     *        minimum configuratio
     */
    public function generator_configuration(MoodleQuickForm $mform, $detailed, $randomize) {
        //Number of user records to create
        $mform->addElement('text', 'usergeneratornumber', 'Number of students', 'size = "10"');
        $mform->setDefault('usergeneratornumber', 20);
        $mform->setType('usergeneratornumber', PARAM_INT);

        //username prefix field
        if ($detailed) {
            $mform->addElement('text', 'usergeneratorusername', 'Username prefix', 'size = "30"');
        } else {
            $mform->addElement('hidden', 'usergeneratorusername', 'user');
        }
        $mform->setDefault('usergeneratorusername', 'user');
        $mform->setType('usergeneratorusername', PARAM_RAW_TRIMMED);

        //default password field
        if ($detailed) {
            $mform->addElement('text', 'usergeneratorpassword', 'Deafult password', 'size = "20"');
        } else {
            $mform->addElement('hidden', 'usergeneratorpassword', 'password');
        }
        $mform->setDefault('usergeneratorpassword', 'password');
        $mform->setType('usergeneratorpassword', PARAM_RAW_TRIMMED);

        //random theme, language and translation option
        if ($detailed) {
            $mform->addElement('checkbox', 'usergeneratorrandomize', 'Random Data');
        } else {
            if ($randomize) {
                $mform->addElement('hidden', 'usergeneratorrandomize', '1');
            }
        }
        $mform->setType('usergeneratorrandomize', PARAM_INT);

        //random timezone option
        if ($detailed) {
            $mform->addElement('checkbox', 'usergeneratortimezone', 'Random Timezones');
        } else {
            $mform->addElement('hidden', 'usergeneratortimezone', '1');
        }
        $mform->setType('usergeneratortimezone', PARAM_INT);
    }

    /**
     * Validate configuration for plugin generator
     * Any validation check for generator configutaion should be done here.
     *
     * @param object generator object for accessing generated values.
     *
     * @return array error message
     */
    public function validate_configuration($data, $file) {
        //if generated users are less then required users per course then throw error
        if ($data['usergeneratornumber'] < 1) {
            return array('usergeneratornumber' =>
                'Minimum 1 user should be generated');
        } else {
            return null;
        }
    }

    /**
     * Generate data for user plugin depending on configuration
     *
     * It will get configutaion values (defined in generator_configuration) and
     * generate user information with random data.
     *
     * @param bool $verbose if true will echo details of which usernames are
     *        inserted.
     */
    public function generate_data($verbose = true) {
        global $OUTPUT, $CFG, $DB;

        //get all the configuration parameters passed by user.
        $numberofstudents = optional_param('usergeneratornumber', '', PARAM_INT);
        $username = optional_param('usergeneratorusername', '', PARAM_RAW_TRIMMED);

        $password = optional_param('usergeneratorpassword', '', PARAM_RAW_TRIMMED);
        $password = empty($password) ? 'moodle' : $password;

        $randomdata = optional_param('usergeneratorrandomize', '', PARAM_INT);
        $randomdata = empty($randomdata) ? false : true;

        $randomtimezone = optional_param('usergeneratortimezone', '', PARAM_INT);
        $randomtimezone = empty($randomtimezone) ? false : true;

        //Show progess
        $this->show_progress("Generating {$numberofstudents} students...", self::START_PROCESS, 5, true);

        //initalize data array from which data will be picked randomly
        $themes = array('standard');
        $langs = array('en');
        $auths = array('manual');
        //If set random data then populate with list of values
        if ($randomdata) {
            $themes = array_keys(get_list_of_themes());
            $langs  = array_keys(get_string_manager()->get_list_of_translations());
            $auths = array('manual');
        }

        $timezones = array('99');
        $cities = array('Perth');
        $countries = array('AU');
        //If set random data then populate with list of values
        if ($randomtimezone) {
            //TODO: currently timezone with '/' is not supported by create_user
            //$availabletimezones = array_values(get_list_of_timezones());
            $timezones = array('99', '0', '1', '3', '5');
            $cities = $this->cities;
            $countries = array_keys(get_string_manager()->get_list_of_countries());
        }

        //if username prefix is not provided then use 'testuser'
        if (empty($username)) {
            $username = 'testuser';
        }

        //check if we have username with same prefix, if yes then increment the
        //counter correspondingly
        $counter = get_last_suffixed_counter($username, 'user', 'username');

        //Increment counter with 1. If 0 then start from 1 else start with one number
        //extra then already available username
        $counter++;

        $users = array();
        for ($count = 0; $count < $numberofstudents; $count++) {
            //fill dummy data
            $fname = trim(ucfirst(strtolower(
                    $this->firstnames[rand(0, count($this->firstnames) - 1)])));
            $lname = trim(ucfirst(
                    strtolower($this->lastnames[rand(0, count($this->lastnames) - 1)])));
            $randomemail = $username.$counter.'@'.
                           $this->domains[rand(0, count($this->domains) -1)].'.com.local';

            //create user array with dummy data
            $user = array();
            $user['username']  = $username.$counter;
            $user['password']  = $password;
            $user['firstname'] = $fname;
            $user['lastname']  = $lname;
            $user['email']     = $randomemail;
            $user['auth']      = $auths[rand(0, count($auths) - 1)];
            $user['lang']      = $langs[rand(0, count($langs) - 1)];
            $user['theme']     = $themes[rand(0, count($themes) - 1)]; 
            $user['timezone']  = $timezones[rand(0, count($timezones) - 1)];
            $user['city']      = $cities[rand(0, count($cities) - 1)];
            $user['country']   = $countries[rand(0, count($countries) - 1)];

            //Push user array to list of users array.
            array_push($users, $user);
            $counter++;
        }

        //Create users using externallib
        $extrenaluserlib = new moodle_user_external();
        $userscreated = $extrenaluserlib->create_users($users);

        foreach ($userscreated as $key => $value) {
            array_push($this->userids, $value['id']);
        }

        //Verbose the output if asked.
        if ($verbose) {
            foreach ($this->userids as $userid) {
                $this->show_progress("User created: {$userid}", self::PROCESSING, 6, false);
            }
        }
        $this->show_progress("users correctly inserted in the database", self::END_PROCESS, 6, false);
    }

    /**
     * This should return data which was generated by generate_data, to be shared
     * by other generator's so that database hits can be reduced.
     * if this plugin data is used by other plugins then they should be retrived
     * by this function.
     * Try keep it minimum to avoid memory issues, like for users just the id is
     * used often so no need to keep rest of the data.
     *
     * @param int $filter if 0 then returns full list of id => username created
     *        else if -ve then shuffle and return number of records
     *        else returns number of records
     * @return mixed data set which was generated by plugin
     */
    public function data($filter = null) {
        //if filter <= 0 or more then usercount the return full array
        if (($filter == 0) or ($filter > count($this->userids))) {
            return $this->userids;
        } else if ($filter < 0) {
            return array_slice(shuffle($this->userids), 0, abs($filter), true);
        } else {
            return array_slice($this->userids, 0, $filter, true);
        }
    }

    /**
     * Clean data generated by this plugin generator
     */
    public function clean_data() {
        global $DB;

        //if we have data then loop through and delete data
        if (!empty($this->userids)) {
            //delete all generated users
            $DB->delete_records_list('user', 'id', $this->userids);
        }
    }
}